[tool.poetry]
name = "portfoliobuilder"
version = "1.0.0"
description = ""
authors = ["yeungadrian <yeungadrian@gmail.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "3.11.*"
fastapi = "^0.111.0"
uvicorn = "^0.30.1"
polars = "^1.0.0"
pydantic-settings = "^2.3.4"
scipy = "^1.14.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.1"
pytest = "^8.2.2"
pytest-asyncio = "^0.23.7"
coverage =  {version="^7.5.4", extras=["toml"]}
trio = "^0.26.0"

[tool.poetry.group.local.dependencies]
ipykernel = "^6.29.5"

[tool.mypy]
files = ["app"]
strict = true
enable_error_code = [
  "redundant-expr",
  "truthy-bool",
  "ignore-without-code",
]
disable_error_code = [
  "empty-body",
]
disallow_subclassing_any = false
disallow_untyped_decorators = false

[tool.pytest.ini_options]
addopts = [
  "--strict-config",
  "--strict-markers",
]
xfail_strict = true
junit_family = "xunit2"
filterwarnings = [
    # see https://trio.readthedocs.io/en/stable/history.html#trio-0-22-0-2022-09-28
    "ignore:You seem to already have a custom.*:RuntimeWarning:trio",
    "ignore::trio.TrioDeprecationWarning",
]

[tool.coverage.run]
source = [
    "app",
    "tests",
]

[tool.ruff]
line-length = 118
fix = true

[tool.ruff.lint]
select = [
  "E", # pycodestyle
  "W", # pycodestyle
  "F", # Pyflakes
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "D213", # Augment NumPy docstring convention: Multi-line docstring summary should start at the second line
  "D417", # Augment NumPy docstring convention: Missing argument descriptions
  "I", # isort
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "UP", # pyupgrade
  "PT", # flake8-pytest-style
  "RUF", # Ruff-specific rules
  "PTH", # flake8-use-pathlib
  "PIE", # flake8-pie
  "TD", # flake8-todos
  "TRY", # tryceratops
  "EM", # flake8-errmsg
  "FBT001", # flake8-boolean-trap
]

ignore = [
  # Line length regulated by formatter
  "E501",
  # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
  "D401", # Relax NumPy docstring convention: First line should be in imperative mood
  # flake8-pytest-style:
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  # flake8-simplify
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  "SIM108", # Use ternary operator
  # ruff
  "RUF005", # unpack-instead-of-concatenating-to-collection-literal
  # pycodestyle
  # TODO: Remove errors below to further improve docstring linting
  # Ordered from most common to least common errors.
  "D105", # Missing docstring in magic method
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "TCH", # flake8-type-checking. Fastapi uses pydantic type hints for openapi
  # flake8-todos
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  # tryceratops
  "TRY003", # Avoid specifying long messages outside the exception class
  # Lints below are turned off because of conflicts with the ruff formatter
  "D206",
  "W191",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D100", "D102", "D103", "B018", "FBT001"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.format]
docstring-code-format = true
